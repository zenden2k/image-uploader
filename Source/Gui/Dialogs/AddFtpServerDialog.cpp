// This file was generated by WTL Dialog wizard 
// AddFtpServerDialog.cpp : Implementation of CAddFtpServerDialog

#include "AddFtpServerDialog.h"
#include "Gui/GuiTools.h"
#include "Core/ServerListManager.h"
#include "Core/Settings/WtlGuiSettings.h"
#include "Core/Upload/TestConnectionTask.h"
#include "Gui/Components/MyFileDialog.h"
#include "Core/Upload/UploadManager.h"
#include "Core/UploadEngineList.h"

// CAddFtpServerDialog
CAddFtpServerDialog::CAddFtpServerDialog(CUploadEngineList* uploadEngineList)
{
    connectionNameEdited = false;
    downloadUrlEdited = false;
    serverNameEdited = false;
    uploadEngineList_ = uploadEngineList;
    serverType_ = ServerListManager::ServerType::stFTP;
    testSuccess_ = false;
}

LRESULT CAddFtpServerDialog::OnInitDialog(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled)
{
    backgroundBrush_.CreateSysColorBrush(COLOR_BTNFACE);

    SetWindowText(TR("Add FTP/SFTP server"));
    TRC(IDC_CONNECTIONNAMELABEL, "Connection  name:");
    TRC(IDC_SERVERSTATIC, "Server [:port]:");
    TRC(IDC_AUTHENTICATIONLABEL, "Authenticaton:");
    TRC(IDC_LOGINLABEL, "Login:");
    TRC(IDC_PASSWORDLABEL, "Password:");
    TRC(IDC_REMOTEDIRECTORYLABEL, "Remote directory:");
    TRC(IDC_DOWNLOADURLLABEL, "URL for downloading:");
    TRC(IDOK, "OK");
    TRC(IDCANCEL, "Cancel");
    TRC(IDC_THEURLOFUPLOADEDLABEL, "URL for downloading will look like:");
    TRC(IDC_SERVERTYPELABEL, "Server type:");
    TRC(IDC_PRIVATEKEYLABEL, "Private key file:");
    TRC(IDC_TESTCONNECTIONBTN, "Test connection");
    TRC(IDC_SECUREDCONNECTIONLABEL, "Secured connection:");
    TRC(IDC_ACTIVECONNECTIONCHECKBOX, "Active connection");

    serverTypeComboBox_ = GetDlgItem(IDC_SERVERTYPECOMBO);
    serverTypeComboBox_.AddString(TR("FTP"));
    serverTypeComboBox_.AddString(TR("SFTP"));
    serverTypeComboBox_.AddString(TR("WebDAV"));

    securedConectionCombobox_ = GetDlgItem(IDC_SECUREDCONNECTIONCOMBOBOX);

    activeConnectionCheckBox_ = GetDlgItem(IDC_ACTIVECONNECTIONCHECKBOX);
    activeConnectionCheckBox_.SetCheck(BST_UNCHECKED);

    serverTypeComboBox_.SetCurSel(static_cast<int>(ServerListManager::ServerType::stFTP));
    connectionStatusLabelFont_ = GuiTools::MakeLabelBold(GetDlgItem(IDC_CONNECTIONSTATUSLABEL));
    if (ServiceLocator::instance()->translator()->isRTL()) {
        // Removing WS_EX_RTLREADING style from some controls to look properly when RTL interface language is chosen
        HWND serverEditHwnd = GetDlgItem(IDC_SERVEREDIT);
        LONG styleEx = ::GetWindowLong(serverEditHwnd, GWL_EXSTYLE);
        ::SetWindowLong(serverEditHwnd, GWL_EXSTYLE, styleEx & ~WS_EX_RTLREADING);

        HWND remoteDirectoryEditHwnd = GetDlgItem(IDC_REMOTEDIRECTORYEDIT);
        styleEx = ::GetWindowLong(remoteDirectoryEditHwnd, GWL_EXSTYLE);
        ::SetWindowLong(remoteDirectoryEditHwnd, GWL_EXSTYLE, styleEx & ~WS_EX_RTLREADING);

        HWND downloadUrlEditHwnd = GetDlgItem(IDC_DOWNLOADURLEDIT);
        styleEx = ::GetWindowLong(downloadUrlEditHwnd, GWL_EXSTYLE);
        ::SetWindowLong(downloadUrlEditHwnd, GWL_EXSTYLE, styleEx & ~WS_EX_RTLREADING);

        HWND exampleUrlLabel = GetDlgItem(IDC_EXAMPLEURLLABEL);
        styleEx = ::GetWindowLong(exampleUrlLabel, GWL_EXSTYLE);
        ::SetWindowLong(exampleUrlLabel, GWL_EXSTYLE, styleEx & ~WS_EX_RTLREADING & ~WS_EX_LAYOUTRTL);
        LONG style = ::GetWindowLong(exampleUrlLabel, GWL_STYLE);
        ::SetWindowLong(exampleUrlLabel, GWL_STYLE, style | SS_RIGHT);
    }

    HWND hWnd = GetDlgItem(IDC_ANIMATION);
    if (hWnd)
    {
        wndAnimation_.SubclassWindow(hWnd);
        wndAnimation_.ShowWindow(SW_HIDE); 
    }

    onServerTypeChange();
    ::SetFocus(GetDlgItem(IDC_CONNECTIONNAMEEDIT));
    SetDlgItemText(IDC_REMOTEDIRECTORYEDIT, _T("/"));
    CenterWindow(GetParent());
    return 0;  // Let the system set the focus
}

LRESULT CAddFtpServerDialog::OnClickedOK(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL& bHandled)
{ 
    addServer(false);
    return 0;
}

LRESULT CAddFtpServerDialog::OnClickedCancel(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL& bHandled)
{
    if (uploadSession_) {
        auto* uploadManager = ServiceLocator::instance()->uploadManager();
        uploadManager->stopSession(uploadSession_.get());
    } else {
        EndDialog(wID);
    }

    return 0;
}


LRESULT CAddFtpServerDialog::OnConnectionNameEditChange(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL& bHandled) {
    if ( GetFocus() == hWndCtl ) {
        connectionNameEdited = !GuiTools::GetDlgItemText(m_hWnd, IDC_CONNECTIONNAMEEDIT).IsEmpty();
    }
    if ( !serverNameEdited) {
        CString connectionName = GuiTools::GetDlgItemText(m_hWnd, IDC_CONNECTIONNAMEEDIT);
        if ( connectionName.Find(_T(".")) != -1 ) {
            SetDlgItemText(IDC_SERVEREDIT, connectionName);
        }
    }

    return 0;
}

LRESULT CAddFtpServerDialog::OnServerEditChange(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL& bHandled) {
    if ( GetFocus() == hWndCtl ) {
        serverNameEdited = !GuiTools::GetDlgItemText(m_hWnd, IDC_SERVEREDIT).IsEmpty();
    }
    if ( !connectionNameEdited ) {
        CString serverName = GuiTools::GetDlgItemText(m_hWnd, IDC_SERVEREDIT);
        int delimPos = serverName.Find(_T("://"));

        if (delimPos != -1) {
            serverName = serverName.Mid(delimPos + 3);
        }
        SetDlgItemText(IDC_CONNECTIONNAMEEDIT, serverName);
    }
    GenerateDownloadLink();

    return 0;
}

LRESULT CAddFtpServerDialog::OnRemoteDirectoryEditChange(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL& bHandled) {
    GenerateDownloadLink();
    return 0;
}

LRESULT CAddFtpServerDialog::OnDownloadUrlEditChange(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL& bHandled) {
    if ( GetFocus() == hWndCtl ) {
        downloadUrlEdited = !GuiTools::GetDlgItemText(m_hWnd, IDC_DOWNLOADURLEDIT).IsEmpty();
        GenerateExampleUrl();
    }
    return 0;
}

CString CAddFtpServerDialog::createdServerName() const
{
    return createdServerName_;
}

CString CAddFtpServerDialog::createdServerLogin() const
{
    return createdServerLogin_;
}

void CAddFtpServerDialog::GenerateDownloadLink()
{
    if ( !downloadUrlEdited ) {
        CString serverName = GuiTools::GetDlgItemText(m_hWnd, IDC_SERVEREDIT);
        int delimPos = serverName.Find(_T("://"));

        if (delimPos != -1) {
            serverName = serverName.Mid(delimPos + 3);
        }
        int pos = serverName.ReverseFind(L':');
        if ( pos != -1 ) {
            serverName = serverName.Left(pos);
        }

        CString remoteDirectory = GuiTools::GetDlgItemText(m_hWnd, IDC_REMOTEDIRECTORYEDIT);
        if ( remoteDirectory.Left(1) != _T("/") ) {
            remoteDirectory = _T("/") + remoteDirectory;
        }
        if ( remoteDirectory.Right(1) != _T("/") ) {
            remoteDirectory += _T("/");

        }

        if ( !serverName.IsEmpty() ) {
            const CString generatedDownloadUrl = "http://" + serverName + remoteDirectory;
            SetDlgItemText(IDC_DOWNLOADURLEDIT, generatedDownloadUrl);
            
        }
    }
    GenerateExampleUrl();
}

void CAddFtpServerDialog::GenerateExampleUrl()
{
    CString downloadUrl = GuiTools::GetDlgItemText(m_hWnd, IDC_DOWNLOADURLEDIT);

    SetDlgItemText(IDC_EXAMPLEURLLABEL, downloadUrl + "example.png");
}

LRESULT CAddFtpServerDialog::OnBnClickedBrowsePrivateKey(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL& bHandled) {
    IMyFileDialog::FileFilterArray filters = {
        { TR("All files"), _T("*.*") }
    };

    auto dlg = MyFileDialogFactory::createFileDialog(m_hWnd, WinUtils::GetAppFolder(), TR("Choose program"), filters, false);
    if (dlg->DoModal(m_hWnd) != IDOK) {
        return 0;
    }

    SetDlgItemText(IDC_PRIVATEKEYEDIT, dlg->getFile());
    return 0;
}

LRESULT CAddFtpServerDialog::OnServerTypeComboChange(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL& bHandled) {
    onServerTypeChange();
    return 0;
}

void CAddFtpServerDialog::onServerTypeChange() {
    ServerListManager::ServerType serverType = static_cast<ServerListManager::ServerType>(serverTypeComboBox_.GetCurSel());
    bool enable = serverType == ServerListManager::ServerType::stSFTP;
    GuiTools::EnableDialogItem(m_hWnd, IDC_PRIVATEKEYLABEL, enable);
    GuiTools::EnableDialogItem(m_hWnd, IDC_PRIVATEKEYEDIT, enable);
    GuiTools::EnableDialogItem(m_hWnd, IDC_BROWSEPRIVATEKEYBUTTON, enable);

    bool enableSSL = serverType == ServerListManager::ServerType::stFTP || serverType == ServerListManager::ServerType::stWebDAV;
    GuiTools::EnableDialogItem(m_hWnd, IDC_SECUREDCONNECTIONLABEL, enableSSL);
    GuiTools::EnableDialogItem(m_hWnd, IDC_SECUREDCONNECTIONCOMBOBOX, enableSSL);

    activeConnectionCheckBox_.EnableWindow(serverType == ServerListManager::ServerType::stFTP);
    updateSecuredConnectionCombobox();
}

LRESULT CAddFtpServerDialog::OnClickedTestConnection(WORD wNotifyCode, WORD wID, HWND hWndCtl, BOOL& bHandled) {
    addServer(true);
    return 0;
}

void CAddFtpServerDialog::addServer(bool test) {
    CString serverName = GuiTools::GetDlgItemText(m_hWnd, IDC_SERVEREDIT);
    serverName.Trim(_T(" "));

    if (serverName.IsEmpty()) {
        MessageBox(TR("Server's name cannot be empty"), TR("Error"), MB_ICONERROR);
        return;
    }
    CString connectionName = GuiTools::GetDlgItemText(m_hWnd, IDC_CONNECTIONNAMEEDIT);
    connectionName.Trim(_T(" "));
    if (connectionName.IsEmpty()) {
        LocalizedMessageBox(TR("Connection name cannot be empty"), TR("Error"), MB_ICONERROR);
        return;
    }

    CString downloadUrl = GuiTools::GetDlgItemText(m_hWnd, IDC_DOWNLOADURLEDIT);
    downloadUrl.Trim(_T(" "));
    if (downloadUrl.IsEmpty()) {
        LocalizedMessageBox(TR("Download URL cannot be empty."), TR("Error"), MB_ICONERROR);
        return;
    }

    CString remoteDirectory = GuiTools::GetDlgItemText(m_hWnd, IDC_REMOTEDIRECTORYEDIT);
    if (remoteDirectory.Left(1) != _T("/")) {
        remoteDirectory = _T("/") + remoteDirectory;
    }
    if (remoteDirectory.Right(1) != _T("/")) {
        remoteDirectory += _T("/");

    }
    CString login = GuiTools::GetDlgItemText(m_hWnd, IDC_LOGINEDITBOX);
    CString password = GuiTools::GetDlgItemText(m_hWnd, IDC_PASSWORDEDITBOX);
    serverType_ = static_cast<ServerListManager::ServerType>(serverTypeComboBox_.GetCurSel());

    int securedConnection = securedConectionCombobox_.GetCurSel();
    bool activeConnection = activeConnectionCheckBox_.GetCheck() == BST_CHECKED;
    std::string privateKeyFile;
    if (serverType_ == ServerListManager::ServerType::stSFTP) {
        privateKeyFile = W2U(GuiTools::GetDlgItemText(m_hWnd, IDC_PRIVATEKEYEDIT));

        if (privateKeyFile.length() && !IuCoreUtils::FileExists(privateKeyFile)) {
            LocalizedMessageBox(TR("Private key file doesn't exist."), TR("Error"), MB_ICONERROR);
            return;
        }
    }
    auto* settings = ServiceLocator::instance()->settings<WtlGuiSettings>();

    ServerListManager slm(settings->SettingsFolder + "\\Servers\\", uploadEngineList_, settings->ServersSettings);
    try {
        std::string servName = slm.addFtpServer(serverType_, test, W2U(connectionName), W2U(serverName), W2U(login),
            W2U(password), W2U(remoteDirectory), W2U(downloadUrl), privateKeyFile, securedConnection, activeConnection ? "-" : "");
        createdServerName_ = U2W(servName);
        createdServerLogin_ = login;
        if (test) {
            SetDlgItemText(IDC_CONNECTIONSTATUSLABEL, _T(""));
            using namespace std::placeholders;
            auto authTask = std::make_shared<TestConnectionTask>();
            ServerProfile serverProfile(servName);
            serverProfile.setProfileName(W2U(login));
            authTask->setServerProfile(serverProfile);
            authTask->addTaskFinishedCallback([this](UploadTask* task, bool success) {
                testSuccess_ = success;
                CString msg = U2W(task->uploadResult()->message);
                if (msg.IsEmpty()) {
                    msg = success ? TR("Success") : TR("Test failed");
                }
                SetDlgItemText(IDC_CONNECTIONSTATUSLABEL, msg);
                currentTask_.reset();
            });
            auto* uploadManager = ServiceLocator::instance()->uploadManager();
            enableControls(false);
            wndAnimation_.ShowWindow(SW_SHOW);
            currentTask_ = authTask;
            uploadSession_ = std::make_shared<UploadSession>();
            uploadSession_->addTask(currentTask_);
            uploadSession_->addSessionFinishedCallback([this, servName](UploadSession*) {
                uploadSession_.reset();
                uploadEngineList_->removeServer(servName);
                ServiceLocator::instance()->settings<WtlGuiSettings>()->ServersSettings.erase(servName);
                enableControls(true);
                wndAnimation_.ShowWindow(SW_HIDE);
            });
            uploadManager->addSession(uploadSession_);
        } else {
            EndDialog(IDOK);
        }
    }
    catch (const std::exception& ex) {
        CString errorMessage = TR("Could not add server.");
        const CString reason = U2W(ex.what());
        if (!reason.IsEmpty()) {
            errorMessage += CString(L"\r\n") + TR("Reason:") + L"\r\n" + reason;
        }
        LocalizedMessageBox(errorMessage, TR("Error"), MB_ICONERROR);
    }
}

void CAddFtpServerDialog::enableControls(bool enable) {
    GuiTools::EnableDialogItem(m_hWnd, IDOK, enable);
    GuiTools::EnableDialogItem(m_hWnd, IDC_TESTCONNECTIONBTN, enable);
}

void CAddFtpServerDialog::updateSecuredConnectionCombobox() {
    ServerListManager::ServerType serverType = static_cast<ServerListManager::ServerType>(serverTypeComboBox_.GetCurSel());

    securedConectionCombobox_.ResetContent();
    securedConectionCombobox_.AddString(TR("No"));
    if (serverType == ServerListManager::ServerType::stFTP) {
        securedConectionCombobox_.AddString(TR("Explicit"));
        securedConectionCombobox_.AddString(TR("Implicit"));
    } else {
        securedConectionCombobox_.AddString(TR("Yes"));
    }
}

LRESULT CAddFtpServerDialog::OnCtlColorMsgDlg(HDC hdc, HWND hwndChild) {
    if (hwndChild == GetDlgItem(IDC_CONNECTIONSTATUSLABEL)) {
        if (testSuccess_) {
            SetTextColor(hdc, RGB(0, 180, 0));
        } else {
            SetTextColor(hdc, GetSysColor(COLOR_WINDOWTEXT));
        }
        SetBkMode(hdc, TRANSPARENT);
        return reinterpret_cast<LRESULT>(backgroundBrush_.m_hBrush);
    }
    return 0;
}
