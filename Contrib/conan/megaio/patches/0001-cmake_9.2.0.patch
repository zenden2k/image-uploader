 cmake/modules/sdklib_libraries.cmake | 192 ++++++++++-------------------------
 1 file changed, 53 insertions(+), 139 deletions(-)

diff --git a/cmake/modules/sdklib_libraries.cmake b/cmake/modules/sdklib_libraries.cmake
index b50d1b7ca..ecb7555fe 100644
--- a/cmake/modules/sdklib_libraries.cmake
+++ b/cmake/modules/sdklib_libraries.cmake
@@ -1,152 +1,66 @@
 macro(load_sdklib_libraries)
+	#find_package(PkgConfig REQUIRED)
 
     target_link_libraries(SDKlib PUBLIC ccronexpr)
 
-    if(VCPKG_ROOT)
-        find_package(cryptopp CONFIG REQUIRED)
-        target_link_libraries(SDKlib PUBLIC cryptopp::cryptopp) # TODO: Private for SDK core
-
-        find_package(unofficial-sodium REQUIRED)
-        if(WIN32)
-            target_link_libraries(SDKlib PUBLIC unofficial-sodium::sodium)  # TODO: Private for SDK core
-        else()
-            target_link_libraries(SDKlib PRIVATE unofficial-sodium::sodium unofficial-sodium::sodium_config_public)
-        endif()
-
-        find_package(unofficial-sqlite3 REQUIRED)
-        target_link_libraries(SDKlib PRIVATE unofficial::sqlite3::sqlite3)
-
-        find_package(CURL REQUIRED)
-        target_link_libraries(SDKlib PRIVATE CURL::libcurl)
-
-        if(USE_OPENSSL)
-            if(USE_WEBRTC) # Defined in MEGAchat.
-                # find_package(OpenSSL) works for BoringSSL but it does not load the flags from the .pc files. find_package() has
-                # its own way to prepare the OpenSSL needed flags and configurations.
-                # Linking gfxworker when using BoringSSL from WebRTC requires the -lX11 flag for WebRTC, despite we only need
-                # the BoringSSL symbols.
-                # Using pkg-config in that specific case, honors the "OpenSSL" .pc files used as a way to impersonate OpenSSL/BoringSSL
-                # using the one contained in WebRTC library.
-                find_package(PkgConfig REQUIRED)
-                pkg_check_modules(openssl REQUIRED IMPORTED_TARGET openssl)
-                target_link_libraries(SDKlib PRIVATE PkgConfig::openssl)
-            else()
-                find_package(OpenSSL REQUIRED)
-                target_link_libraries(SDKlib PRIVATE OpenSSL::SSL OpenSSL::Crypto)
-            endif()
-        endif()
-
-        if(USE_MEDIAINFO)
-            # MediaInfo is not setting libzen dependency correctly. Preload it.
-            find_package(ZenLib CONFIG REQUIRED)
-            target_link_libraries(SDKlib PRIVATE zen)
-
-            find_package(MediaInfoLib REQUIRED)
-            target_link_libraries(SDKlib PRIVATE mediainfo)
-        endif()
-
-        if(USE_FREEIMAGE)
-            find_package(freeimage REQUIRED)
-            target_link_libraries(SDKlib PRIVATE freeimage::FreeImage)
-        endif()
-
-        if(USE_FFMPEG)
-            find_package(FFMPEG REQUIRED)
-            target_include_directories(SDKlib PRIVATE ${FFMPEG_INCLUDE_DIRS})
-            target_link_directories(SDKlib PRIVATE ${FFMPEG_LIBRARY_DIRS})
-            target_link_libraries(SDKlib PRIVATE ${FFMPEG_LIBRARIES})
-            set(HAVE_FFMPEG 1)
-        endif()
-
-        if(USE_LIBUV)
-            find_package(libuv REQUIRED)
-            target_link_libraries(SDKlib PRIVATE $<IF:$<TARGET_EXISTS:uv_a>,uv_a,uv>)
-            set(HAVE_LIBUV 1)
-        endif()
-
-        if(USE_PDFIUM)
-            find_package(pdfium REQUIRED)
-            target_link_libraries(SDKlib PRIVATE PDFIUM::pdfium)
-            set(HAVE_PDFIUM 1)
-        endif()
-
-        find_package(ICU COMPONENTS uc data REQUIRED)
-        target_link_libraries(SDKlib PRIVATE ICU::uc ICU::data)
-
-        if(USE_READLINE)
-            find_package(Readline-unix REQUIRED)
-            target_link_libraries(SDKlib PRIVATE Readline::Readline)
-
-            # Curses is needed by Readline
-            set(CURSES_NEED_NCURSES TRUE)
-            find_package(Curses REQUIRED)
-            target_include_directories(SDKlib PRIVATE ${CURSES_INCLUDE_DIRS})
-            target_compile_options(SDKlib PRIVATE ${CURSES_CFLAGS})
-            target_link_libraries(SDKlib PRIVATE ${CURSES_LIBRARIES})
-        else()
-            set(NO_READLINE 1)
-        endif()
-
-    else() # No VCPKG usage. Use pkg-config
-
-        find_package(PkgConfig REQUIRED) # For libraries loaded using pkg-config
-
-        pkg_check_modules(cryptopp REQUIRED IMPORTED_TARGET libcrypto++)
-        target_link_libraries(SDKlib PUBLIC PkgConfig::cryptopp) # TODO: Private for SDK core
-
-        pkg_check_modules(sodium REQUIRED IMPORTED_TARGET libsodium)
-        target_link_libraries(SDKlib PRIVATE PkgConfig::sodium)
-
-        pkg_check_modules(sqlite3 REQUIRED IMPORTED_TARGET sqlite3)
-        target_link_libraries(SDKlib PRIVATE PkgConfig::sqlite3)
-
-        pkg_check_modules(curl REQUIRED IMPORTED_TARGET libcurl)
-        target_link_libraries(SDKlib PRIVATE PkgConfig::curl)
-
-        find_package(ICU COMPONENTS uc data REQUIRED)
-        target_link_libraries(SDKlib PRIVATE ICU::uc ICU::data)
-
-        if(USE_OPENSSL)
-            find_package(OpenSSL REQUIRED)
-            target_link_libraries(SDKlib PRIVATE OpenSSL::SSL OpenSSL::Crypto)
-        endif()
-
-        if(USE_MEDIAINFO)
-            pkg_check_modules(mediainfo REQUIRED IMPORTED_TARGET libmediainfo)
-            target_link_libraries(SDKlib PRIVATE PkgConfig::mediainfo)
-        endif()
+    find_package(cryptopp CONFIG REQUIRED)
+    find_package(libsodium CONFIG REQUIRED)
+    find_package(SQLite3 CONFIG REQUIRED)
+    find_package(CURL CONFIG REQUIRED)
+    find_package(ICU REQUIRED)
+
+    target_link_libraries(SDKlib PUBLIC
+        cryptopp::cryptopp
+        libsodium::libsodium
+        icu::icu
+        CURL::libcurl
+        SQLite::SQLite3
+    )
+
+    if(USE_OPENSSL)
+        find_package(OpenSSL REQUIRED)
+        target_link_libraries(SDKlib PUBLIC openssl::openssl)
+    endif()
 
-        if(USE_FREEIMAGE)
-            # FreeImage has no pkg-config file. Use out own FindFreeImage.cmake to find the library.
-            find_package(FreeImage REQUIRED)
-            target_link_libraries(SDKlib PRIVATE FreeImage::FreeImage)
-        endif()
+    if(USE_MEDIAINFO)
+        find_package(MediaInfoLib REQUIRED)
+        #find_package(ZenLib CONFIG REQUIRED)
+        target_link_libraries(SDKlib PRIVATE 
+        mediainfo
+      #      ZenLib::ZenLib
+        )
+    endif()
 
-        if(USE_FFMPEG)
-            pkg_check_modules(ffmpeg REQUIRED IMPORTED_TARGET libavformat libavutil libavcodec libswscale libswresample)
-            target_link_libraries(SDKlib PRIVATE PkgConfig::ffmpeg)
-            set(HAVE_FFMPEG 1)
-        endif()
+    if(USE_FREEIMAGE)
+        find_package(FreeImage CONFIG REQUIRED)
+        target_link_libraries(SDKlib PUBLIC freeimage::freeimage)
+    endif()
 
-        if(USE_LIBUV)
-            pkg_check_modules(uv REQUIRED IMPORTED_TARGET libuv)
-            target_link_libraries(SDKlib PRIVATE PkgConfig::uv)
-            set(HAVE_LIBUV 1)
-        endif()
+    if(USE_FFMPEG)
+        find_package(FFmpeg REQUIRED)
+        target_link_libraries(SDKlib PRIVATE
+			ffmpeg::avcodec ffmpeg::avformat ffmpeg::avutil ffmpeg::swscale
+        )
+        set(HAVE_FFMPEG 1)
+    endif()
 
-        if(USE_PDFIUM)
-            pkg_check_modules(pdfium REQUIRED IMPORTED_TARGET pdfium)
-            target_link_libraries(SDKlib PRIVATE PkgConfig::pdfium)
-            set(HAVE_PDFIUM 1)
-        endif()
+    if(USE_LIBUV)
+        find_package(libuv REQUIRED)
+        target_link_libraries(SDKlib PUBLIC uv)
+        set(HAVE_LIBUV 1)
+    endif()
 
-        if(USE_READLINE)
-            pkg_check_modules(readline REQUIRED IMPORTED_TARGET readline)
-            target_link_libraries(SDKlib PRIVATE PkgConfig::readline)
-        else()
-            set(NO_READLINE 1)
-        endif()
+    if(USE_PDFIUM)
+        find_package(PDFium CONFIG REQUIRED)
+        target_link_libraries(SDKlib PRIVATE pdfium::pdfium)
+        set(HAVE_PDFIUM 1)
+    endif()
 
+    if(USE_READLINE)
+        find_package(Readline REQUIRED)
+        target_link_libraries(SDKlib PRIVATE readline::readline)
+    else()
+        set(NO_READLINE 1)
     endif()
 
 endmacro()
 tests/CMakeLists.txt | 5 ++---
 1 file changed, 2 insertions(+), 3 deletions(-)

diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index ce5f23b15..850db817f 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -30,9 +30,8 @@ if(VCPKG_ROOT)
     find_package(GTest CONFIG REQUIRED)
     target_link_libraries(test_common INTERFACE GTest::gmock GTest::gtest)
 else()
-    pkg_check_modules(gtest REQUIRED IMPORTED_TARGET gtest)
-    pkg_check_modules(gmock REQUIRED IMPORTED_TARGET gmock)
-    target_link_libraries(test_common INTERFACE PkgConfig::gmock PkgConfig::gtest)
+	find_package(GTest REQUIRED)
+    target_link_libraries(test_common INTERFACE GTest::gmock GTest::gtest)
 endif()
 
 if(ENABLE_SDKLIB_TESTS) # This file is also loaded for MEGAchat tests.
